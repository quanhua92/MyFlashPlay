/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ScoresRouteImport } from './routes/scores'
import { Route as DecksRouteImport } from './routes/decks'
import { Route as CreateRouteImport } from './routes/create'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlayDeckIdRouteImport } from './routes/play.$deckId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ScoresRoute = ScoresRouteImport.update({
  id: '/scores',
  path: '/scores',
  getParentRoute: () => rootRouteImport,
} as any)
const DecksRoute = DecksRouteImport.update({
  id: '/decks',
  path: '/decks',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayDeckIdRoute = PlayDeckIdRouteImport.update({
  id: '/play/$deckId',
  path: '/play/$deckId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/decks': typeof DecksRoute
  '/scores': typeof ScoresRoute
  '/settings': typeof SettingsRoute
  '/play/$deckId': typeof PlayDeckIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/decks': typeof DecksRoute
  '/scores': typeof ScoresRoute
  '/settings': typeof SettingsRoute
  '/play/$deckId': typeof PlayDeckIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/decks': typeof DecksRoute
  '/scores': typeof ScoresRoute
  '/settings': typeof SettingsRoute
  '/play/$deckId': typeof PlayDeckIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/decks'
    | '/scores'
    | '/settings'
    | '/play/$deckId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/create' | '/decks' | '/scores' | '/settings' | '/play/$deckId'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/decks'
    | '/scores'
    | '/settings'
    | '/play/$deckId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  DecksRoute: typeof DecksRoute
  ScoresRoute: typeof ScoresRoute
  SettingsRoute: typeof SettingsRoute
  PlayDeckIdRoute: typeof PlayDeckIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scores': {
      id: '/scores'
      path: '/scores'
      fullPath: '/scores'
      preLoaderRoute: typeof ScoresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/decks': {
      id: '/decks'
      path: '/decks'
      fullPath: '/decks'
      preLoaderRoute: typeof DecksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/play/$deckId': {
      id: '/play/$deckId'
      path: '/play/$deckId'
      fullPath: '/play/$deckId'
      preLoaderRoute: typeof PlayDeckIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  DecksRoute: DecksRoute,
  ScoresRoute: ScoresRoute,
  SettingsRoute: SettingsRoute,
  PlayDeckIdRoute: PlayDeckIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
